 Imagine you get a sequence of N numbers. The goal is to move the numbers around so that at the end the sequence is ordered. The only operation allowed is to swap two adjacent numbers. Let us try an example: Start with: 2 8 0 3 swap (2 8) 8 2 0 3 swap (2 0) 8 0 2 3 swap (2 3) 8 0 3 2 swap (8 0) 0 8 3 2 swap (8 3) 0 3 8 2 swap (8 2) 0 3 2 8 swap (3 2) 0 2 3 8 swap (3 8) 0 2 8 3 swap (8 3) 0 2 3 8

So the sequence (2 8 0 3) can be sorted with nine swaps of adjacent numbers. However, it is even possible to sort it with three such swaps: Start with: 2 8 0 3 swap (8 0) 2 0 8 3 swap (2 0) 0 2 8 3 swap (8 3) 0 2 3 8

The question is: What is the minimum number of swaps of adjacent numbers to sort a given sequence?Since Charlie does not have Raymond's mental capabilities, he decides to cheat. Here is where you come into play. He asks you to write a computer program for him that answers the question in O(nlogn). Rest assured he will pay a very good prize for it.

输入格式:
The first line contains the length N (1 <= N <= 1000) of the sequence； The second line contains the N elements of the sequence (each element is an integer in [-1000000, 1000000]). All numbers in this line are separated by single blanks.

输出格式:
Print a single line containing the minimal number of swaps of adjacent numbers that are necessary to sort the given sequence.

#include<iostream>
using namespace std;
//参考归并排序算法 
int answer;
const int MAXSIZE = 1010;
int R[MAXSIZE];
int T[MAXSIZE];
//相邻两个有序子序列的归并
void Merge(int R[],int T[],int low,int mid,int high)
{
	if(low >= high)
	{
		return;
	}
	int i = low,j = mid + 1;
	int k = 0;
	while(i <= mid && j <= high)
	{
		if(R[i] <= R[j])
		{
			T[k++] = R[i++];
			answer += j - mid - 1;
		}
		else
		{
			T[k++] = R[j++];
		}
	}
	while(i <= mid)
	{
		T[k++] = R[i++];
		answer += high - mid;
	}
	while(j <= high)
	{
		T[k++] = R[j++];
	}
	for(i = 0;i < k;i++)
	{
		R[low + i] = T[i];
	}
} 
//归并排序
void MSort(int R[],int T[],int low,int high)
{
	if(low >= high)
	{
		return;
	}
	int mid = (low + high)/2;
	MSort(R,T,low,mid);
	MSort(R,T,mid+1,high);
	Merge(R,T,low,mid,high);
} 

int main()
{
	int n;
	cin>>n;
	answer = 0;
	for(int i = 0;i < n;i++)
	{
		cin>>R[i];
	}
	MSort(R,T,0,n-1);
	cout<<answer<<endl;
}
