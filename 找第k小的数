设计一个平均时间为O(n)的算法，在n(1<=n<=1000)个无序的整数中找出第k小的数。

提示：函数int partition(int a[],int left,int right)的功能是根据a[left]~a[right]中的某个元素x（如a[left])对a[left]~a[right]进行划分，划分后的x所在位置的左段全小于等于x,右段全大于等于x,同时利用x所在的位置还可以计算出x是这批数据按升非降序排列的第几个数。因此可以编制int find(int a[],int left,int right,int k)函数，通过调用partition函数获得划分点，判断划分点是否第k小，若不是，递归调用find函数继续在左段或右段查找。

输入格式:
输入有两行：

第一行是n和k，0<k<=n<=10000

第二行是n个整数

输出格式:
输出第k小的数

#include<iostream>
using namespace std;
//定义函数partition，对数组进行划分，参考快速排序的方法对数组进行排序
int partition(int a[],int left,int right)
{
	int x = a[left];
	
	while(left < right)
	{
	while(left < right && a[right] >= x) --right;
	a[left] = a[right];
	while(left < right && a[left] <= x) ++left;
	a[right] = a[left];
	}
	
	a[left] = x;
	
	return left;
} 
//定义函数find，参考快速排序的递归实现，结合函数partition实现查找
int find(int a[],int left,int right,int k)
{
	int temp = partition(a,left,right);
	//当划分点是按升非降序排列的第k-1个数时，划分点即为所求 
	if(k - 1 == temp)
	{
		cout<<a[k - 1];
	} 
	//小于时向左查询 
	else if(k -1 < temp)
	{
		find(a,left,temp - 1,k);
	} 
	//大于时向右查询 
	else
	{
		find(a,temp + 1,right,k);
	}
	return 0;
} 

int main()
{
	int n,k;
	cin>>n>>k;
	
	int a[1000];
	for(int i = 0;i < n;i++)
	{
		cin>>a[i];
	}
	
	find(a,0,n - 1,k);
	
	return 0;
}
